module video(
	input reset,
	input clk,
	output reg Hsync, Vsync,
	output reg [7:0] R, G, B,
	input [3:0] KEYS,
	input [3:0] FUNC
);

// Resolution is 1024x768@60Hz

parameter H_RES = 1024;
parameter H_SYNC = 136;
parameter H_BP = 160;
parameter H_FP = 24;

parameter H_LINE = H_SYNC + H_BP + H_RES + H_FP;

parameter V_RES = 768;
parameter V_SYNC = 6;
parameter V_BP = 29;
parameter V_FP = 3;

parameter V_LINE = V_SYNC + V_BP + V_RES + V_FP;



// Hpos= 0.. 1688
//Vpos= 0..1066 --> 11 bits;

reg [10:0] Hpos, Vpos; // Current Drawing Position

// Code Variables go here

reg [10:0] posX, posY; // Current Drawing Position

//Code Variables end here



always @ (posedge(clk) or posedge(reset)) 
begin

	if (reset == 1)
	begin
		Hpos <= 11'd0;
		Vpos <= 11'd0;
	end
	else
	begin // not reset

	if (Hpos < H_LINE) Hpos <= Hpos + 1'b1; // Horizontal increment
		else
		begin
			Hpos <= 11'd0; // New Line --> Hpos = 0
			
			
			if (Vpos == V_LINE) Vpos <= 11'd0; // New screen --> Vpos = 0
			else
			begin
				Vpos <= Vpos + 1'b1;  // Vertical increment
			end
		end

			// Generate Hsync, and Vsync VGA signals
		if ((Hpos >= H_FP) && (Hpos < H_FP + H_SYNC)) Hsync <= 1'b0;
		else Hsync <= 1'b1;
		
		if ((Vpos >= V_FP) && (Vpos < V_FP + V_SYNC)) Vsync <= 1'b0;
		else Vsync <= 1'b1;

		// R = G = B = 0 on front, back porsh and sync
		if (((Hpos >= 11'd0) && (Hpos < H_FP + H_SYNC + H_BP)) || ((Vpos >= 11'd0) && (Vpos < V_FP + V_SYNC + V_BP)))
		begin
			R <= 8'h00;
			G <= 8'h00;
			B <= 8'h00;
		end
		
		// Posição atual no ecrã
		posX <= Hpos - (H_FP + H_SYNC + H_BP);
		posY <= Vpos - (V_FP + V_SYNC + V_BP);
		
		if ((posX >= 0) && (posY >=0))
		begin
		
		// Code goes here
		
		R <= 8'h00;
		G <= 8'h00;
		B <= 8'h00;
		if ((posX % 8 == 0) && (posY % 8 == 0))
			begin
				R <= 8'hff;
				G <= 8'h00;
				B <= 8'h00;
			end
			
		/*
		//Cross red/green
		
		R <= 8'h00;
		G <= 8'h00;
		B <= 8'h00;
		if (posX == H_RES/2)
			begin
				R <= 8'hff;
				G <= 8'h00;
				B <= 8'h00;
			end
		else
		if (posY == V_RES/2)
			begin
				R <= 8'h00;
				G <= 8'hff;
				B <= 8'h00;
			end
		//Cross red/green
		*/
		
		// Code ends here
		end // ((posX >= 0) && (posY >=0))
		
		
	
		
	end //clk
end //always

endmodule
